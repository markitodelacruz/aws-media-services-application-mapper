# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
This file contains helper functions for building the node cache.
"""

import hashlib
import json
import os
import time
from urllib.parse import urlparse

import boto3
from botocore.exceptions import ClientError
from botocore.exceptions import EndpointConnectionError
from jsonpath_ng import parse

from chalicelib import content
from chalicelib import cache

# TTL provided via CloudFormation
CACHE_ITEM_TTL = int(os.environ["CACHE_ITEM_TTL"])

# table names generated by CloudFormation
CONTENT_TABLE_NAME = os.environ["CONTENT_TABLE_NAME"]


def update_regional_ddb_items(region_name):
    """
    Update all services in the cache for a region.
    """
    try:
        content.put_ddb_items(medialive_input_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)
    try:
        content.put_ddb_items(medialive_channel_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)
    try:
        content.put_ddb_items(mediapackage_channel_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)
    try:
        content.put_ddb_items(mediapackage_origin_endpoint_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)
    try:
        content.put_ddb_items(mediastore_container_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)
    try:
        content.put_ddb_items(speke_server_ddb_items(region_name))
    except (ClientError, EndpointConnectionError) as error:
        print(error)


def s3_bucket_ddb_items():
    """
    Retrieve and format S3 buckets for cache storage.
    """
    items = []
    for bucket in s3_buckets():
        arn = "arn:aws:s3:::{}".format(bucket["Name"])
        service = "s3"
        items.append(node_to_ddb_item(arn, service, "global", bucket))
    return items


def cloudfront_distribution_ddb_items():
    """
    Retrieve and format CloudFront distributions for cache storage.
    """
    items = []
    for item in cloudfront_distributions():
        arn = item["ARN"]
        service = "cloudfront-distribution"
        items.append(node_to_ddb_item(arn, service, "global", item))
    return items


def medialive_channel_ddb_items(region):
    """
    Retrieve and format MediaLive channels for cache storage.
    """
    items = []
    for channel in medialive_channels(region):
        arn = channel["Arn"]
        service = "medialive-channel"
        items.append(node_to_ddb_item(arn, service, region, channel))
    return items


def medialive_input_ddb_items(region):
    """
    Retrieve and format MediaLive inputs for cache storage.
    """
    items = []
    for ml_input in medialive_inputs(region):
        arn = ml_input["Arn"]
        service = "medialive-input"
        items.append(node_to_ddb_item(arn, service, region, ml_input))
    return items


def mediapackage_channel_ddb_items(region):
    """
    Retrieve and format MediaPackage channels for cache storage.
    """
    items = []
    for channel in mediapackage_channels(region):
        arn = channel["Arn"]
        service = "mediapackage-channel"
        items.append(node_to_ddb_item(arn, service, region, channel))
    return items


def mediapackage_origin_endpoint_ddb_items(region):
    """
    Retrieve and format MediaPackage endpoints for cache storage.
    """
    items = []
    for endpoint in mediapackage_origin_endpoints(region):
        arn = endpoint["Arn"]
        service = "mediapackage-origin-endpoint"
        items.append(node_to_ddb_item(arn, service, region, endpoint))
    return items


def mediastore_container_ddb_items(region):
    """
    Retrieve and format MediaPackage endpoints for cache storage.
    """
    items = []
    for container in mediastore_containers(region):
        arn = container["ARN"]
        service = "mediastore-container"
        items.append(node_to_ddb_item(arn, service, region, container))
    return items


def speke_server_ddb_items(region):
    """
    Find the SPEKE key servers based on MediaPackage endpoint configurations
    """
    items = []
    # create an expression to find speke server urls
    jsonpath_expr = parse('$..SpekeKeyProvider.Url')
    # get MediaPackage origin endpoints
    mediapackage_ep_cached = cache.cached_by_service_region("mediapackage-origin-endpoint", region)
    for endpoint in mediapackage_ep_cached:
        # decode the endpoint configuration
        endpoint_data = json.loads(endpoint["data"])
        for server_url in [match.value for match in jsonpath_expr.find(endpoint_data)]:
            parsed = urlparse(server_url)
            sha = hashlib.sha1()
            sha.update(server_url.encode('utf-8'))
            url_digest = sha.hexdigest()
            arn = "arn:oss:speke:::{}".format(url_digest)
            config = {"arn": arn, "endpoint": server_url, "scheme": parsed.scheme}
            service = "speke-keyserver"
            # print(config)
            items.append(node_to_ddb_item(arn, service, "global", config))
    return items


def node_to_ddb_item(arn, service, region, config):
    """
    Restructure an item from a List or Describe API call into a cache item.
    """
    now = int(time.time())
    item = {"arn": arn, "region": region, "service": service, "updated": now, "expires": now + CACHE_ITEM_TTL, "data": json.dumps(config, default=str)}
    return item


def cloudfront_distributions():
    """
    Retrieve all CloudFront distributions (global).
    """
    service = boto3.client("cloudfront")
    response = service.list_distributions()
    items = response["DistributionList"]["Items"]
    while "NextMarker" in response["DistributionList"]:
        response = service.list_distributions(Marker=response["DistributionList"]["NextMarker"])
        items = items + response["DistributionList"]["Items"]
    for item in items:
        item['LastModifiedTime'] = str(item['LastModifiedTime'])
        # get Tags
        response = service.list_tags_for_resource(Resource=item["ARN"])
        item["Tags"] = response["Tags"]
    return items


def s3_buckets():
    """
    Retrieve all S3 buckets (global).
    """
    service = boto3.client("s3")
    buckets = service.list_buckets()
    for item in buckets["Buckets"]:
        item["CreationDate"] = str(item["CreationDate"])
    return buckets["Buckets"]


def mediapackage_channels(region):
    """
    Return the MediaPackage channels for the given region.
    """
    service = boto3.client("mediapackage", region_name=region)
    jsonpath_expr = parse('$..Password')
    response = service.list_channels()
    items = response['Channels']
    while "NextToken" in response:
        response = service.list_channels(NextToken=response["NextToken"])
        items = items + response['Channels']
    jsonpath_expr.update(items, "XXXXXXXXXXXX")
    return items


def mediapackage_origin_endpoints(region):
    """
    Return the MediaPackage origin endpoints for the given region.
    """
    service = boto3.client("mediapackage", region_name=region)
    response = service.list_origin_endpoints()
    items = response['OriginEndpoints']
    while "NextToken" in response:
        response = service.list_origin_endpoints(NextToken=response["NextToken"])
        items = items + response['OriginEndpoints']
    return items


def medialive_channels(region):
    """
    Return the MediaLive channels for the given region.
    """
    service = boto3.client("medialive", region_name=region)
    response = service.list_channels()
    items = response['Channels']
    while "NextToken" in response:
        response = service.list_channels(NextToken=response["NextToken"])
        items = items + response['Channels']
    return items


def medialive_inputs(region):
    """
    Return the MediaLive inputs for the given region.
    """
    service = boto3.client("medialive", region_name=region)
    response = service.list_inputs()
    items = response['Inputs']
    while "NextToken" in response:
        response = service.list_inputs(NextToken=response["NextToken"])
        items = items + response['Inputs']
    return items


def mediastore_containers(region):
    """
    Return the MediaLive inputs for the given region.
    """
    service = boto3.client("mediastore", region_name=region)
    response = service.list_containers()
    items = response['Containers']
    while "NextToken" in response:
        response = service.list_containers(NextToken=response["NextToken"])
        items = items + response['Containers']
    for item in items:
        item['CreationTime'] = str(item['CreationTime'])
    return items
