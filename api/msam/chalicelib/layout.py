# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
This file contains helper functions related to layout.
"""

import os

import boto3
from boto3.dynamodb.conditions import Key
from botocore.exceptions import ClientError

# table names generated by CloudFormation
LAYOUT_TABLE_NAME = os.environ["LAYOUT_TABLE_NAME"]

# DynamoDB
DYNAMO_RESOURCE = boto3.resource("dynamodb")


def get_view_layout(request, view):
    """
    API entry point for retrieving all item positions in a view.
    """
    items = []
    table_name = LAYOUT_TABLE_NAME
    try:
        table = DYNAMO_RESOURCE.Table(table_name)
        print(request.method)
        try:
            # get the settings object
            response = table.query(KeyConditionExpression=Key('view').eq(view))
            print(response)
            # return the response or an empty object
            if "Items" in response:
                items = response["Items"]
            print("retrieved")
        except ClientError:
            print("not found")
    except ClientError as error_out:
        # send the exception back in the object
        print(error_out)
        items = {"exception": str(error_out)}
    return items


def set_node_layout(request):
    """
    API entry point for setting nodes in a view. This adds new nodes and overwrites existing nodes. It does not replace the entire set.
    """
    settings = {}
    table_name = LAYOUT_TABLE_NAME
    try:
        table = DYNAMO_RESOURCE.Table(table_name)
        print(request.json_body)
        layout_items = request.json_body
        # write to the database in batch
        for item in layout_items:
            table.put_item(Item=item)
        settings = {"message": "saved"}
        print(settings)
    except ClientError as error:
        # send the exception back in the object
        print(error)
        settings = {"exception": str(error)}
    return settings


def delete_node_layout(node_id):
    """
    API entry point to delete the layout for a node.
    """
    print("deleting layout for " + node_id)
    settings = {}
    table_name = LAYOUT_TABLE_NAME
    try:
        table = DYNAMO_RESOURCE.Table(table_name)
        try:
            # get each layout record for the ID
            response = table.query(IndexName="IdIndex", KeyConditionExpression=Key('id').eq(node_id))
            print(response)
            # remove each record
            if "Items" in response:
                for item in response["Items"]:
                    table.delete_item(Key={"view": item["view"], "id": node_id})
        except ClientError:
            print("not found")
            settings = {"message": "not found"}
        settings = {"message": "deleted"}
        print(settings)
    except ClientError as error_out:
        # send the exception back in the object
        print(error_out)
        settings = {"exception": str(error_out)}
    return settings
